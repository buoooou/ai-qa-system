name: AI QA System CI/CD

on:
  push:
    branches: [ main, develop, feature/yulong ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip unit tests'
        type: boolean
        default: false
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  SHOULD_SKIP_TESTS: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.skip_tests == 'true') || contains(github.event.head_commit.message, '[skip tests]') || vars.SKIP_TESTS == 'true' }}

jobs:
  # 代码质量检查
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: fronted/package-lock.json

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    - name: Run backend tests
      if: false  # 永久跳过测试
      run: |
        cd backend-services
        mvn -B clean test

    - name: Build backend without tests
      if: ${{ env.SHOULD_SKIP_TESTS == 'true' }}
      run: |
        cd backend-services
        mvn -B -DskipTests package
    - name: Install frontend dependencies
      run: |
        cd fronted
        npm ci

    - name: Run frontend linting
      run: |
        cd fronted
        npm run lint

    - name: Run frontend build
      run: |
        cd fronted
        npm run build

  # 构建Docker镜像
  build-images:
    needs: code-quality
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    strategy:
      matrix:
        service: [api-gateway, user-service, qa-service, frontend]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.service == 'frontend' && './fronted' || './backend-services' }}
        file: ${{ matrix.service == 'frontend' && './fronted/Dockerfile' || format('./backend-services/{0}/Dockerfile', matrix.service) }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 安全扫描
  security-scan:
    needs: build-images
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # 部署到开发环境
  deploy-dev:
    needs: [build-images, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to development
      run: |
        echo "🚀 Deploying  to development environment..."
        # 这里可以添加部署到开发环境的脚本
        # 例如：kubectl apply -f k8s/dev/ 或者 docker-compose up -d

    - name: Run health checks
      run: |
        echo "🏥 Running health checks..."
        # 添加健康检查脚本

  # 部署到生产环境
  deploy-prod:
    needs: [build-images, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "🚀 Deploying to production environment..."
        # 这里可以添加部署到生产环境的脚本

    - name: Run health checks
      run: |
        echo "🏥 Running production health checks..."

    - name: Notify deployment success
      run: |
        echo "✅ Production deployment completed successfully!"

  # 性能测试
  performance-test:
    needs: deploy-dev
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'

    steps:
    - uses: actions/checkout@v4

    - name: Run performance tests
      run: |
        echo "⚡ Running performance tests..."
        # 可以集成 k6, JMeter 或其他性能测试工具

  # # 清理旧镜像
  # cleanup:
  #   needs: [deploy-dev, deploy-prod]
  #   runs-on: ubuntu-latest
  #   if: always()

    # steps:
    # - name: Delete old container images
    #   uses: actions/delete-package-versions@v4
    #   with:
    #     package-name: ${{ env.IMAGE_NAME }}-api-gateway-yulong
    #     package-type: container
    #     min-versions-to-keep: 5
    #     delete-only-untagged-versions: true
