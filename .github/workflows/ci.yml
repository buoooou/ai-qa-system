# 工作流的名称，会显示在 GitHub Actions 的 UI 界面中
name: CI/CD for AI QA System

# 工作流的触发条件
on:
  # 当有代码推送到 main 分支时触发
  push:
    branches: [ "main" ]
  # 当有针对 main 分支的 Pull Request 被创建或更新时触发
  pull_request:
    branches: [ "main" ]

# 定义工作流中的所有任务 (Jobs)
jobs:

  # --- 第二个任务：构建 Docker 镜像并推送到仓库 ---
  build-and-push-images:
    # 任务的名称
    name: Build and Push Docker Images
    # 运行此任务所需的虚拟机环境
    runs-on: ubuntu-latest



    # 任务的执行步骤
    steps:
      # 步骤 1: 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤 2: 登录到 Docker Hub
      # 这是将镜像推送到 Docker Hub 所必需的步骤。
      # 你需要先在 GitHub 仓库的 Settings -> Secrets and variables -> Actions 中设置好 DOCKERHUB_USERNAME 和 DOCKERHUB_TOKEN。
      # DOCKERHUB_TOKEN 应该是一个 Access Token，而不是你的密码。
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 步骤 3: 设置 Docker Buildx
      # Buildx 是一个 Docker CLI 插件，它扩展了 docker build 命令，支持多阶段构建等高级功能。
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 步骤 4: 构建并推送 API Gateway 镜像
      # docker/build-push-action@v5 action 会自动完成构建和推送两个步骤。
      # context: Dockerfile 所在的目录。
      # file: Dockerfile 的具体路径。
      # push: true 表示要推送到仓库。
      # tags: 为镜像打上标签，格式通常是 "用户名/镜像名:版本号"。latest 是一个常用标签。
      - name: Build and push API Gateway image
        uses: docker/build-push-action@v5
        with:
          context: ./backend-services
          file: ./backend-services/api-gateway/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ai-qa-api-gateway:latest

      # 步骤 5: 构建并推送 User Service 镜像
      - name: Build and push User Service image
        uses: docker/build-push-action@v5
        with:
          context: ./backend-services
          file: ./backend-services/user-service/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ai-qa-user-service:latest

      # 步骤 6: 构建并推送 QA Service 镜像
      - name: Build and push QA Service image
        uses: docker/build-push-action@v5
        with:
          context: ./backend-services
          file: ./backend-services/qa-service/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ai-qa-qa-service:latest

      # 步骤 7: 构建并推送 Frontend 镜像
      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend # 假设前端项目在根目录的 frontend 文件夹下
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ai-qa-frontend:latest

      # 步骤 8: 构建并推送 MySQL 镜像
      # 为AI问答系统构建自定义的MySQL镜像，包含初始化脚本和配置
      - name: Build and push MySQL image
        uses: docker/build-push-action@v5
        with:
          context: ./database # MySQL相关文件所在目录
          file: ./database/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ai-qa-mysql:latest
      #把同版本的 docker-compose.yml 复制到 EC2
      - name: Copy docker-compose.yml to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: |
            docker-compose.yml
            database/            
          target: ~/airline-cicd/
          strip_components: 0
      

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e               # 任何命令失败就退出
            mkdir -p ~/airline-cicd
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            cd ~/airline-cicd
            docker-compose down -v
            docker-compose pull
            docker-compose up -d --remove-orphans
            docker image prune -f