name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  BACKEND_IMAGE_PREFIX: chatbox-
  FRONTEND_IMAGE: chatbox-frontend

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend-nextjs/package-lock.json
        
    - name: Test Backend Services
      run: |
        cd backend-services
        mvn clean test -B
        echo "后端测试通过！"
        
    - name: Verify Frontend Build
      run: |
        cd frontend-nextjs
        # 清理缓存
        rm -rf .next node_modules package-lock.json
        # 使用更稳定的 Node.js 版本兼容性设置
        npm install --legacy-peer-deps
        npm run build
        echo "前端构建成功！"
        
    - name: Verify OpenAPI Documentation
      run: |
        cd backend-services
        # 验证每个服务是否包含springdoc依赖
        echo "验证API网关的OpenAPI配置..."
        cd api-gateway
        grep -q "springdoc" pom.xml && echo "✓ api-gateway 包含springdoc依赖" || echo "✗ api-gateway 缺少springdoc依赖"
        cd ..
        
        echo "验证用户服务的OpenAPI配置..."
        cd user-service
        grep -q "springdoc" pom.xml && echo "✓ user-service 包含springdoc依赖" || echo "✗ user-service 缺少springdoc依赖"
        cd ..
        
        echo "验证QA服务的OpenAPI配置..."
        cd qa-service
        grep -q "springdoc" pom.xml && echo "✓ qa-service 包含springdoc依赖" || echo "✗ qa-service 缺少springdoc依赖"
        cd ..

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.18.0'
        cache: 'npm'
        cache-dependency-path: frontend-nextjs/package-lock.json
        
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and Push Backend Services
      run: |
        cd backend-services
        services=("api-gateway" "user-service" "qa-service")
        
        for service in "${services[@]}"; do
          echo "Building $service..."
          cd $service
          mvn clean package -DskipTests -B
          
          docker build -t ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.BACKEND_IMAGE_PREFIX }}$service:latest .
          docker push ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.BACKEND_IMAGE_PREFIX }}$service:latest
          cd ..
        done
        
    - name: Build and Push Frontend
      run: |
        cd frontend-nextjs
        # 直接构建Docker镜像，Dockerfile内部会处理依赖安装和构建
        docker build -t ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.FRONTEND_IMAGE }}:latest .
        docker push ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.FRONTEND_IMAGE }}:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # 拉取最新镜像
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/chatbox-api-gateway:latest
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/chatbox-user-service:latest
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/chatbox-qa-service:latest
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/chatbox-frontend:latest
          
          # 停止并删除旧容器
          docker-compose down
          
          # 启动新容器
          docker-compose up -d
          
          # 等待服务健康检查通过
          echo "等待服务启动..."
          sleep 30
          
          # 验证服务健康状态
          echo "验证API网关健康状态..."
          curl -f http://localhost:8080/actuator/health || exit 1
          
          echo "验证用户服务健康状态..."
          curl -f http://localhost:8081/actuator/health || exit 1
          
          echo "验证QA服务健康状态..."
          curl -f http://localhost:8082/actuator/health || exit 1
          
          echo "验证OpenAPI文档..."
          curl -f http://localhost:8080/api-docs && echo "✓ API网关OpenAPI文档可访问"
          curl -f http://localhost:8080/swagger-ui.html && echo "✓ API网关Swagger UI可访问"
          
          curl -f http://localhost:8081/api-docs && echo "✓ 用户服务OpenAPI文档可访问"
          curl -f http://localhost:8081/swagger-ui.html && echo "✓ 用户服务Swagger UI可访问"
          
          curl -f http://localhost:8082/api-docs && echo "✓ QA服务OpenAPI文档可访问"
          curl -f http://localhost:8082/swagger-ui.html && echo "✓ QA服务Swagger UI可访问"
          
          # 清理无用镜像
          docker image prune -f
          
          echo "所有服务健康检查通过！部署成功。"